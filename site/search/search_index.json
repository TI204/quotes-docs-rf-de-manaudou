{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"features/","text":"Documentation Programming Quotes [RF de Manaudou] Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs. Membres du groupe collaborateur 1 : [Dubreuil nathan] collaborateur 2 : [Alessandri Guillaume] 'collaborateur 3 : Aden FIDON 'collaborateur 4 : Taha Baidou","title":"Documentation Programming Quotes [RF de Manaudou]"},{"location":"features/#documentation-programming-quotes-rf-de-manaudou","text":"Programming Quotes est petite application qui permet d'afficher des citations humouristique de programmeurs.","title":"Documentation Programming Quotes [RF de Manaudou]"},{"location":"features/#membres-du-groupe","text":"collaborateur 1 : [Dubreuil nathan] collaborateur 2 : [Alessandri Guillaume] 'collaborateur 3 : Aden FIDON 'collaborateur 4 : Taha Baidou","title":"Membres du groupe"},{"location":"features/features/","text":"Main files main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application. Usage Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py Features and commands random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime Example $ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Features"},{"location":"features/features/#main-files","text":"main.py : Main file of the application. quotes.txt : File containing the quotes. functions.py : File containing the functions used in the application.","title":"Main files"},{"location":"features/features/#usage","text":"Clone the repository and run the following command to start the application: $ git clone <url-du-TP4/quotes> $ cd quotes $ python main.py","title":"Usage"},{"location":"features/features/#features-and-commands","text":"random : Get a random programming quote display : Display multiple quotes add : Add a new quote to your collection exit : Exit anytime","title":"Features and commands"},{"location":"features/features/#example","text":"$ python main.py ==== Programming Quotes ==== random : Random quote display : Display quotes add : Add a new quote exit : Exit the program >> random Why do programmers prefer dark chocolate? Because it's byte-sized!","title":"Example"},{"location":"features/functions/","text":"Core functions File functions.py load_quotes(filename) def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes random_quote(quotes) def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote print_quote(quote) def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote) add_quote(quotes, filename) def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\") display_quotes(quotes, count) def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"Core Functions"},{"location":"features/functions/#core-functions","text":"","title":"Core functions"},{"location":"features/functions/#file-functionspy","text":"","title":"File functions.py"},{"location":"features/functions/#load_quotesfilename","text":"def load_quotes(filename): \"\"\" Loads quotes from a file and returns them as a list. Parameters: filename (str): The path to the file containing quotes. The function reads the file line by line, strips whitespace, and appends non-empty lines to a list. Each line in the file should contain one quote. Returns: list: A list of quotes loaded from the file. Example: load_quotes('quotes.txt') This function reads the file 'quotes.txt' and returns a list of quotes. \"\"\" quotes = [] with open(filename, 'r') as file: lines = file.readlines() for line in lines: line = line.strip() if line: quotes.append(line) return quotes","title":"load_quotes(filename)"},{"location":"features/functions/#random_quotequotes","text":"def random_quote(quotes): \"\"\" Returns a random quote from the provided list of quotes. Parameters: quotes (list): A list of quotes from which a random quote will be selected. The function uses the random.choice() method to select a random quote. Returns: str: A randomly selected quote from the list. Example: random_quote(['Quote 1', 'Quote 2', 'Quote 3']) This function returns a random quote from the provided list. \"\"\" random_quote = random.choice(quotes) return random_quote","title":"random_quote(quotes)"},{"location":"features/functions/#print_quotequote","text":"def print_quote(quote): \"\"\" Prints a single quote to the console. Parameters: quote (str): The quote to be printed. The function formats the quote with asterisks and prints it to the console. Returns: None Example: print_quote('This is a quote.') \"\"\" print(quote) def view_quotes(quotes): \"\"\" Prints all quotes in the provided list to the console. Parameters: quotes (list): A list of quotes to be printed. The function iterates through the list and prints each quote using the Returns: None Example: view_quotes(['Quote 1', 'Quote 2', 'Quote 3']) This function prints each quote in the provided list. \"\"\" for quote in quotes: print_quote(quote)","title":"print_quote(quote)"},{"location":"features/functions/#add_quotequotes-filename","text":"def add_quote(quotes, filename): \"\"\" Adds a new quote to the list of quotes and appends it to a file. Parameters: quotes (list): A list of existing quotes to which the new quote will be added. filename (str): The path to the file where the new quote will be appended. The function prompts the user to input a new quote, appends it to the provided list of quotes, and writes it to the specified file. Each quote is written on a new line in the file. Returns: None Example: add_quote(['Quote 1', 'Quote 2'], 'quotes.txt') \"\"\" new_quote = input(\"Enter a new quote: \") quotes.append(new_quote) with open(filename, 'a') as file: file.write(new_quote) file.write('\\n') print(\"Quote added successfully!\")","title":"add_quote(quotes, filename)"},{"location":"features/functions/#display_quotesquotes-count","text":"def display_quotes(quotes, count): \"\"\" Displays a specified number of quotes from the provided list. Parameters: quotes (list): A list of quotes to be displayed. count (int): The number of quotes to display. If count is greater than the length of the list, all quotes will be displayed. The function checks if the count is valid and prints the specified number of quotes. If the count exceeds the number of available quotes, it prints all quotes. Returns: None Example: display_quotes(['Quote 1', 'Quote 2', 'Quote 3'], 2) This function prints the first 2 quotes from the provided list. \"\"\" if count >= len(quotes): print(\"All Quotes:\") view_quotes(quotes) else: print(f\"First {count} Quotes:\") for i in range(count): print_quote(quotes[i])","title":"display_quotes(quotes, count)"},{"location":"features/user-interface/","text":"Interface File main.py menu() def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\") main() def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"User Interface"},{"location":"features/user-interface/#interface","text":"","title":"Interface"},{"location":"features/user-interface/#file-mainpy","text":"","title":"File main.py"},{"location":"features/user-interface/#menu","text":"def menu(): \"\"\" Displays the menu options for the user. The menu includes options to display a random quote, display a specified number of quotes, add a new quote, and exit the program. Returns: None \"\"\" print(\"\\n==== Programming Quotes ====\") print(\"random : Random quote\") print(\"display : Display quotes\") print(\"add : Add a new quote\") print(\"exit : Exit the program\")","title":"menu()"},{"location":"features/user-interface/#main","text":"def main(): \"\"\" Main function to run the program. It loads quotes from a file, displays the menu, and processes user input to perform actions based on the user's choice. Returns: None \"\"\" while True: quotes = load_quotes(\"quotes.txt\") menu() choice = input(\">> \") if choice == \"random\": print_quote(random_quote(quotes)) elif choice == \"display\": count = int(input(\"Enter the number of quotes to display: \")) display_quotes(quotes, count) elif choice == \"add\": add_quote(quotes, \"quotes.txt\") elif choice == \"exit\": print(\"Good bye...\") break else: print(\"Invalid input\")","title":"main()"},{"location":"logs/log-aden/","text":"$ git log --all --decorate --oneline --graph d51c11b (feature/add-quote) Deplacement de gitignore 16d792e Ajout de la fonctionnalit\u00e9 add_quote 185c797 Ajout de la fonctionnalit\u00e9 add_quote 2dfac51 (HEAD -> main) Ajout de la fonctionnalit\u00e9 add_quote dans le menu e380d0d (origin/main) Initial commit: Added base files (quotes.txt, functions.py, main.py) fc65110 Initial commit","title":"Contributeur 3"},{"location":"logs/log-contributeur4/","text":"Log contributeur4 <contenu du fichier log-contributeur4.txt>","title":"Log contributeur4"},{"location":"logs/log-contributeur4/#log-contributeur4","text":"<contenu du fichier log-contributeur4.txt>","title":"Log contributeur4"},{"location":"logs/log-guillaume/","text":"$ git log --all --decorate --oneline --graph f184993 (origin/gh-pages, gh-pages) Deployed e00ae74 with MkDocs version: 1.6.1 a11a966 Deployed 1c4e2d7 with MkDocs version: 1.6.1 e00ae74 (HEAD -> main, origin/main, origin/HEAD) added functions.md by GA 48536c4 (B2) Merge pull request #2 from Nathandbrl/B1 |\\ | * 0b77bca Add features.md (Contributor 1) | * ee58634 Complete index.md (contributeur 1) | * 1c4e2d7 (origin/B1) Initial Commit de Manaudou | * cb11a58 Initial commit de Manaudou |/ ff90830 add deadline","title":"Contributeur 2"},{"location":"logs/log-mattis/","text":"$ git log --all --decorate --oneline --graph c1a0d73 (origin/gh-pages, gh-pages) Deployed 0e3e50c with MkDocs version: 1.6.1 6fcf978 Deployed 0e3e50c with MkDocs version: 1.6.1 13a062a Deployed 0e3e50c with MkDocs version: 1.6.1 660602e Deployed 0e3e50c with MkDocs version: 1.6.1 a0789c2 Deployed 1c4e2d7 with MkDocs version: 1.6.1 7536c1a Deployed 1c4e2d7 with MkDocs version: 1.6.1 a11a966 Deployed 1c4e2d7 with MkDocs version: 1.6.1 0e3e50c (HEAD -> main, origin/main, origin/HEAD) added gitignore 4ebcc70 Merge remote-tracking branch 'origin/main' |\\ | * 217d4f4 Merge pull request #3 from Darkpinou/main | |\\ | | * e00ae74 added functions.md by GA | |/ | * 48536c4 Merge pull request #2 from Nathandbrl/B1 | |\\ | | * 0b77bca Add features.md (Contributor 1) | | * ee58634 Complete index.md (contributeur 1) | | dcb4bdf Commit |/ / | | * 5e718b4 (B1) added gitignore | |/ | * 1c4e2d7 (origin/B1) Initial Commit de Manaudou | * cb11a58 Initial commit de Manaudou |/ ff90830 add deadline","title":"Initiateur"},{"location":"logs/log-nathan/","text":"0b77bca (HEAD -> B1, origin/B1, B2) Add features.md (Contributor 1) ee58634 Complete index.md (contributeur 1) 1c4e2d7 Initial Commit de Manaudou cb11a58 Initial commit de Manaudou | * 913b0b7 (main) Complete readme (contributeur 1) |/ ff90830 (origin/main, origin/HEAD) add deadline a11a966 (origin/gh-pages) Deployed 1c4e2d7 with MkDocs version: 1.6.1","title":"Contributeur 1"},{"location":"logs/log-taha/","text":"$ git log --all --decorate --oneline --graph * 3afa6b2 (origin/gh-pages, gh-pages) Deployed 9962d86 with MkDocs version: 1.6.1 * 1b200f7 Deployed 9962d86 with MkDocs version: 1.6.1 * 13a062a Deployed 0e3e50c with MkDocs version: 1.6.1 * 660602e Deployed 0e3e50c with MkDocs version: 1.6.1 * a0789c2 Deployed 1c4e2d7 with MkDocs version: 1.6.1 * 7536c1a Deployed 1c4e2d7 with MkDocs version: 1.6.1 * a11a966 Deployed 1c4e2d7 with MkDocs version: 1.6.1 * 9962d86 (HEAD -> main, origin/main, origin/HEAD) \"Pushed log \" * 1bc280a Refactor documentation and pushed log initateur by Taha * 3fd4561 Merge pull request #4 from Sagoram/main |\\ | * 908f849 Added user-interface.md | * b32bc69 Complete index.md and README.md (Contributor 3) * | 0e3e50c added gitignore * | 4ebcc70 Merge remote-tracking branch 'origin/main' || | * 217d4f4 Merge pull request #3 from Darkpinou/main | |\\ | | * e00ae74 added functions.md by GA | |/ | * 48536c4 Merge pull request #2 from Nathandbrl/B1 | |\\ | | * 0b77bca Add features.md (Contributor 1) | | * ee58634 Complete index.md (contributeur 1) | | * 1c4e2d7 (origin/B1) Initial Commit de Manaudou | | * cb11a58 Initial commit de Manaudou | |/ * / dcb4bdf Commit |/ * ff90830 add deadline","title":"Contributeur 4"}]}